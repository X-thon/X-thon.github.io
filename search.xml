<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mac安装并配置MongoDB]]></title>
    <url>%2Fposts%2FMac%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEMongoDB%2F</url>
    <content type="text"><![CDATA[简单介绍了通过Homebrew安装MongDB，并且为其进行简单配置的过程。Mac安装并配置mongodb[Environment]System: macOS 10.14.4Terminal: zsh更新Homebrew首先更新一下homebrew(如果安装了的话)：1brew update安装MongoDB直接使用homebrew安装即可：1brew install mongodb然后便稍等片刻吧。配置MongoDB指定MongoDB进程读写数据的目录。MongoDB默认使用/data/db目录来读写数据，因此此处直接在根目录下创建该文件夹：1sudo mkdir -p /data/db为/data/db文件夹授权：1234#将username替换为自己的用户名sudo chown username /data/db#不知道自己用户名的使用如下命令查看whoami配置mongodb的环境变量我使用的是zsh终端，所以此处先为zsh添加mongdb的安装路径；通过homebrew安装的软件，都被放置在/usr/local/Celler/下，不清楚的话，安装成功后会有提示：如下图：命令如下：123456789vim ~/.zshrc#如果是使用bash终端，则：vim ~/.bash_profile#添加mongodb的安装路径至zsh的path中#在文件末尾使用添加下面的语句export export PATH=/usr/local/Cellar/mongodb/4.0.3_1/bin:$&#123;PATH&#125;#需要注意，此处的文件夹路径根据具体情况填写#保存后，退出编辑文件，激活生效source ~/.zshrc修改MongoDB的配置文件。文件路径在安装成功时也提示给出：修改一下默认的配置：1dbPath: /data/db保存并退出。启动mongod服务：1mongod成功启动则如下图：此时打开另一个终端输入mongo即可打开mongodb-client：123mongo #显示当前数据库集合 show dbs如下图：退出mongoldb-client：]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web实验2碰到的问题]]></title>
    <url>%2Fposts%2FWeb%E5%AE%9E%E9%AA%8C2%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[今日做web实验2，要求很简单，使用php接受html数据而已；但是完成过程中踩了不少坑，特此记录下来。[Problems]Apache配置php7错误;phpstorm提交相关表单，出现 502 bad gateway;phpstorm提交相关表单，出现 404 not found;phpstorm提交相关表单，直接显示php源码，未解析;[Cause]Apache的httpd.conf配置文件出错;运行的php文件需要放在apache的网站根目录下，如果运行不在该目录下的文件就会显示502 bad gateway;其次在运行相关表单提交或者php页面跳转时会提示404 not found，即找不到服务器。这是因为phpstorm的页面默认在localhost：63342端口下运行，而我们的apache服务器一般默认为80端口，所以在提交表单到服务器时它会找不到相关php程序，尽管你的路径是正确的，因此需要配置phpstorm的服务器环境;网上查了许久，各种纷杂的原因，我都折腾了一遍，均未解决；以至于最后我解决了404、502的问题后，莫名其妙的可以解析了，所以我也不清楚原因;[Solutions]打开terminal，如下操作：123456cd /etc/apache2#open httpd.confsudo vim httpd.conf#然后找到LoadModule php7_module···这条语句#将其修改为你系统内的libphp7.so的路径,我使用了自带的，所以便只是将改语句句首的 # 号去掉，变为：LoadModule php7_module libexec/apache2/libphp7.so将文件移动到Apache根目录下即可；配置phpstorm：preferences -&gt; Build,Excution,Deployment -&gt; Deployment ，选择左上角绿色的“+”按钮新建，起个名字，type选择inplace（本地调试的意思），然后设置web sever root url为：http://localhost如图：然后在mappings标签页下填写localpath，即你的apache网站根目录，如图：网上查找的几个点如：修改/etc/php.ini.default为php.ini、将php.ini中的short_open_tag = Off改为short_open_tag = On，再重启Apache(sudo apachectl restart)……]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>apache</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10下利用github+hexo搭建博客]]></title>
    <url>%2Fposts%2FWin10%E4%B8%8B%E5%88%A9%E7%94%A8github%2Bhexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[写在前面：这两天折腾了好一会才将博客搭好，期间查了不少资料看了不少大大的博文，受益匪浅~所以将其总结一下，也为能看到的小伙伴们做个借鉴用吧~φ(゜▽゜*)♪”环境准备win10 64位系统Node.jsGit下载地址，提取码：9uyd (有Git和Node.js的包)安装Node.js和GitNode.js一路点默认即可。。。O(∩_∩)O安装完成后添加Path环境变量，使npm命令生效~1C:\Program Files\nodejs\node_modules\npm至于PATH环境变量：在桌面，找到此电脑 ，右键，点击属性，然后再在右边栏点击高级系统设置，点击右下方 环境变量，在下方框框系统变量那找到PATH，点击编辑，新建即可添加~安装完后在cmd中分别输入12node -vnpm -v如果显示了版本号，就说明安装好啦~Git进入Git的安装界面，如图：大部分设置都只需要保持默认就好啦，但是为了操作方便，我们把PATH选项按照下图选择：这是对上图的解释，不需要了解请直接跳过 Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。Xuanwo's BlogGithub部分注册Github账号如果已经拥有账号，请跳过此步~(●’◡’●)点击教程，按照教程里的步骤注册Github账户~然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。一定要确认注册，否则无法使用gh-pages！创建与账号同名的Repository登陆之后，点击页面右上角的加号，选择New repository：在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：注意！！！yourname.github.io里的yourname要与图里的 / 前的Github的用户名一致正确创建之后，将会看到如下界面（之前的图已经没了，就可耻的盗用一下网上的图片）：开启gh-pages功能点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。部署Hexo安装Hexo在我的电脑中建立一个名字叫「Hexo」的文件夹，然后在此文件夹中右键打开Git Bash，输入：1npm install -g hexo-cli执行完成后hexo就安装成功了第一步结束，环境配置完毕可以开始创建自己的博客了如果出现错误，可能要换一下源，输入下列命令后应该就可以了~ つ﹏⊂1npm config set registry=&quot;http://registry.cnpmjs.org&quot;可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用~然后输入:1npm install hexo --save随后窗口会刷出一大堆的白字，然后你在cmd里输入：1hexo -v如果看到像下图一样的文字：就说明安装成功啦~~~(～￣▽￣)～初始化Hexo接着上面的，输入：1hexo init（没有这一步后的截图啦，再次可耻地拿一张网上的给大家看看）如图：随后输入（安装依赖包）：1npm install安装依赖包Hexo随后会自动在目标文件夹建立网站所需要的所有文件~请耐心等待哦 ^_-~体验Hexo继续，来，我们输入：1hexo g或者:1hexo generate这会生成静态页面至public目录（静态博客就在这个位置）你会看到一些字符刷刷的出来（只要不是提示错误就好啦b（￣▽￣）d ）然后输入：1hexo s或者:1hexo server这会：开启预览访问端口（默认端口4000，在bash窗口执行’ctrl + c’会关闭server）执行正常的话，应该会看到：1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.这样的东西接着，我们只需要在浏览器中打开，就可以看到：好啦，到这里，Hexo在本地的配置就已经全都结束啦~~~o(￣▽￣)ブ部署Hexo到Github Pages配置Git到这一步，我们还需要进行一些配置，以确保确保Hexo生成的页面能够正常的上传到Github(commit)。git-ssh 配置和使用设置Git的user name和email：(如果是第一次的话)Git Bash下输入：12git config --global user.name &quot;你的Github用户名&quot;git config --global user.email &quot;你Github注册的邮箱&quot;生成密钥在你想要存放密钥的文件夹下，打开Git Bash输入：1ssh-keygen -t rsa -C &quot;你Github注册的邮箱&quot;连续3个回车。如果不需要密码的话。最后得到了两个文件：id_rsa 和 id_rsa.pub。在图形界面下打开文件夹找到上面两个文件，右键，以记事本方式打开id_rsa.pub复制里面的公钥，然后打开，打开Settings，找到 SSH and GPG keys添加一个进去：点击New SSH Key在Title处输入一个你记得住的名字在Key处将你复制的公钥粘贴进去好了之后点击Add SSH Key添加公钥（别问我为什么我的那个钥匙图标是绿的…你的key用过一次之后也会变绿的…）Matsuyoi ——Shiratsuyu随后，在你的Hexo的目录下，找到_config.yml文件，右键记事本方式打开，拉到下方，可以看到有这么一行东西，我们在它下方加入：1234deploy: type: git repo: git@github.com:yourname/yourname.github.io.git branch: master注意！！！type：git后面不能有空格”type：”之后请空一格。就是一格，不多不少deploy：的下面三行一定要缩进两个空格！！！这里repo：后面的链接可以从Github上你的存储库那儿，有一个SSH的栏，后面跟着链接，将其复制下来替换掉这儿的就好（直接将这儿的复制进去再改不容易出错哦~）然后，在Git Bash下执行：1npm install hexo-deployer-git --save来安装所需的插件。然后：1hexo d开始上传然后就可以通过来访问自己刚刚上传的网站啦~是不是很开心呢(●’◡’●)最后附上一些常用命令：1234567hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000）hexo deploy #将.deploy目录部署到GitHub（这个下次讲w）hexo help # 查看帮助hexo version #查看Hexo的版本偷偷地：新建的文章保存在source/_post下哦~在Github Pages上绑定自己的域名经过不懈的努力，我们终于可以通过github来访问自己的博客了。但是github.io的域名总给人一种不上档次的感觉，所以我们可以绑定自己的域名，通过自己的域名来访问博客。Matsuyoi ——Shiratsuyu在blog\source中新建一个CNAME文件，将想要绑定的域名输入在里面，保存。例如我想使用二级域名blog，就在文件中输入blog.matsuyoi.com。登录你的域名服务台，在解析记录中添加一条CNAME记录，指向你的github.io地址：（因为我自己用的还是Shiratsuyu的二级域名，所以这儿放他的图）：全部完成后，重新部署静态页面：12hexo ghexo d这样，你就可以通过你自己的域名访问博客啦~O(∩_∩)OHexo 主题配置有没有觉得默认的主题不太符合自己的口味呢？不要慌不要慌ヽ（≧□≦）ノ我们这就来更改主题~可以在此处下载自己喜欢的主题保存到Hexo目录下的themes文件夹下。然后在hexo目录下的_config.yml文件中修改，记事本方式打开，拉到下方，如图：注意：themes下主题的文件夹里也有个_config.yml，别改错了哟~(●ˇ∀ˇ●)]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
  </entry>
</search>
