<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Win10下利用github+hexo搭建博客</title>
    <url>/posts/Win10%E4%B8%8B%E5%88%A9%E7%94%A8github+hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<!-- build time:Thu Apr 16 2020 22:01:41 GMT+0800 (中国标准时间) --><p>写在前面：这两天折腾了好一会才将博客搭好，期间查了不少资料看了不少大大的博文，受益匪浅~所以将其总结一下，也为能看到的小伙伴们做个借鉴用吧 φ(゜▽゜*)♪”</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>win10 64位系统</li><li>Node.js</li><li>Git</li><li><a href="http://pan.baidu.com/s/1pKEKE63" target="_blank" rel="noopener">下载地址</a>，提取码：<code>9uyd</code> (有Git和Node.js的包)</li></ul><h2 id="安装Node-js和Git"><a href="#安装Node-js和Git" class="headerlink" title="安装Node.js和Git"></a>安装Node.js和Git</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>一路点默认即可。。。O(∩_∩)O<br>安装完成后添加Path环境变量，使npm命令生效~</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Program Files\nodejs\node_modules\npm</span><br></pre></td></tr></table></figure><p>至于PATH环境变量：<br>在桌面，找到<strong>此电脑</strong> ，右键，点击<strong>属性</strong>，然后再在右边栏点击高级系统设置，点击右下方 <strong>环境变量</strong>，在下方框框<strong>系统变量</strong>那找到PATH，点击<strong>编辑</strong>，<strong>新建</strong>即可添加~</p><p>安装完后在cmd中分别输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果显示了版本号，就说明安装好啦~</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>进入Git的安装界面，如图：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-192740.jpg" alt="Git-install"><br>大部分设置都只需要保持默认就好啦，但是为了操作方便，我们把PATH选项按照下图选择：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-192844.jpg" alt="Git-PATH-Setting"></p><blockquote><p>这是对上图的解释，不需要了解请直接跳过 Git的默认设置下，出于安全考虑，只有在Git Bash中才能进行Git的相关操作。按照上图进行的选择，将会使得Git安装程序在系统PATH中加入Git的相关路径，使得你可以在CMD界面下调用Git，不用打开Git Bash了。</p><footer><strong>Xuanwo's Blog</strong></footer></blockquote><h2 id="Github部分"><a href="#Github部分" class="headerlink" title="Github部分"></a>Github部分</h2><h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>如果已经拥有账号，请跳过此步~(●’◡’●)</p><p>点击<a href="http://wiki.jikexueyuan.com/project/github-basics/sign-up.html" target="_blank" rel="noopener">教程</a>，按照教程里的步骤注册Github账户~<br>然后前往自己刚才填写的邮箱，点开Github发送给你的注册确认信，确认注册，结束注册流程。<br><strong>一定要确认注册，否则无法使用gh-pages！</strong></p><h3 id="创建与账号同名的Repository"><a href="#创建与账号同名的Repository" class="headerlink" title="创建与账号同名的Repository"></a>创建与账号同名的Repository</h3><p>登陆之后，点击页面右上角的加号，选择New repository：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-192932.jpg" alt="Github-new-repository"><br>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193009.jpg" alt="Github-repository"><br><strong>注意！！！yourname.github.io里的yourname要与图里的 / 前的Github的用户名一致</strong></p><p>正确创建之后，将会看到如下界面（之前的图已经没了，就可耻的盗用一下网上的图片）：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193058.jpg" alt="Github-new-repo-look-like"></p><h3 id="开启gh-pages功能"><a href="#开启gh-pages功能" class="headerlink" title="开启gh-pages功能"></a>开启gh-pages功能</h3><p>点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193140.jpg" alt="Github-pages"><br>点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。</p><hr><h2 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在我的电脑中建立一个名字叫「Hexo」的文件夹，然后在此文件夹中右键打开Git Bash，输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>执行完成后hexo就安装成功了<br>第一步结束，环境配置完毕可以开始创建自己的博客了<br>如果出现错误，可能要换一下源，输入下列命令后应该就可以了~ つ﹏⊂</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry&#x3D;&quot;http:&#x2F;&#x2F;registry.cnpmjs.org&quot;</span><br></pre></td></tr></table></figure><p>可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用~然后输入:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure><p>随后窗口会刷出一大堆的白字，然后你在cmd里输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>如果看到像下图一样的文字：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193239.jpg" alt="Hexo-Version"><br>就说明安装成功啦<del>~</del>(～￣▽￣)～</p><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>接着上面的，输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>（没有这一步后的截图啦，再次可耻地拿一张网上的给大家看看）如图：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193320.jpg" alt="hexo-init"><br>随后输入（安装依赖包）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装依赖包<br>Hexo随后会自动在目标文件夹建立网站所需要的所有文件~<br>请耐心等待哦 ^_-~</p><h3 id="体验Hexo"><a href="#体验Hexo" class="headerlink" title="体验Hexo"></a>体验Hexo</h3><p>继续，来，我们输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>这会生成<strong>静态页面至public目录（静态博客就在这个位置）</strong><br>你会看到一些字符刷刷的出来（只要不是提示错误就好啦b（￣▽￣）d　）<br>然后输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>这会：<br><strong>开启预览访问端口（默认端口4000，在bash窗口执行’ctrl + c’会关闭server）</strong><br>执行正常的话，应该会看到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Hexo is running at http:&#x2F;&#x2F;0.0.0.0:4000&#x2F;. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>这样的东西<br>接着，我们只需要在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="noopener"></a>，就可以看到：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193404.jpg" alt="hexo-first-time"><br>好啦，到这里，Hexo在本地的配置就已经全都结束啦<del>~</del>o(<em>￣▽￣</em>)ブ</p><hr><h2 id="部署Hexo到Github-Pages"><a href="#部署Hexo到Github-Pages" class="headerlink" title="部署Hexo到Github Pages"></a>部署Hexo到Github Pages</h2><h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>到这一步，我们还需要进行一些配置，以确保确保Hexo生成的页面能够正常的上传到Github(commit)。</p><h4 id="git-ssh-配置和使用"><a href="#git-ssh-配置和使用" class="headerlink" title="git-ssh 配置和使用"></a>git-ssh 配置和使用</h4><ol><li><p>设置Git的user name和email：(如果是第一次的话)<br>Git Bash下输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name  &quot;你的Github用户名&quot;</span><br><span class="line">git config --global user.email &quot;你Github注册的邮箱&quot;</span><br></pre></td></tr></table></figure></li><li><p>生成密钥<br>在你想要存放密钥的文件夹下，打开Git Bash<br>输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你Github注册的邮箱&quot;</span><br></pre></td></tr></table></figure><p>连续3个回车。如果不需要密码的话。<br>最后得到了两个文件：<strong>id_rsa</strong> 和 <strong>id_rsa.pub。</strong><br>在图形界面下打开文件夹找到上面两个文件，右键，以记事本方式打开id_rsa.pub<br>复制里面的公钥，然后打开<a href="https://github.com" target="_blank" rel="noopener"></a>，打开Settings，找到 SSH and GPG keys<br>添加一个进去：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193447.jpg" alt="Git-ssh_and_gpg"><br>点击<strong>New SSH Key</strong><br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193518.jpg" alt="Github_ssh_newkey"><br>在<strong>Title</strong>处输入一个你记得住的名字<br>在<strong>Key</strong>处将你复制的公钥粘贴进去<br>好了之后点击<strong>Add SSH Key</strong>添加公钥</p><blockquote><p>（别问我为什么我的那个钥匙图标是绿的…你的key用过一次之后也会变绿的…）</p><footer><strong>Matsuyoi ——Shiratsuyu</strong></footer></blockquote><p>随后，在你的Hexo的目录下，找到<strong>_config.yml</strong>文件，右键记事本方式打开，<br>拉到下方，可以看到<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193554.jpg" alt="Github_Deployment"><br>有这么一行东西，我们在它下方加入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname&#x2F;yourname.github.io.git   </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意！！！</p></li></ol><p><strong>type：git后面不能有空格</strong><br><strong>”type：”之后请空一格。就是一格，不多不少</strong><br><strong>deploy：的下面三行一定要缩进两个空格！！！</strong><br>这里<strong>repo：</strong>后面的链接可以从Github上你的存储库那儿，<br>有一个SSH的栏，后面跟着链接，将其复制下来替换掉这儿的就好<br>（直接将这儿的复制进去再改不容易出错哦~）<br>然后，在Git Bash下执行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>来安装所需的插件。<br>然后：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>开始上传<br>然后就可以通过<a href="http://yourname.github.io/" target="_blank" rel="noopener"></a>来访问自己刚刚上传的网站啦~<br>是不是很开心呢(●’◡’●)</p><p>最后附上一些常用命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000）</span><br><span class="line">hexo deploy #将.deploy目录部署到GitHub（这个下次讲w）</span><br><span class="line">hexo help # 查看帮助</span><br><span class="line">hexo version #查看Hexo的版本</span><br></pre></td></tr></table></figure><p>偷偷地：新建的文章保存在<strong>source/_post</strong>下哦~</p><hr><h2 id="在Github-Pages上绑定自己的域名"><a href="#在Github-Pages上绑定自己的域名" class="headerlink" title="在Github Pages上绑定自己的域名"></a>在Github Pages上绑定自己的域名</h2><blockquote><p>经过不懈的努力，我们终于可以通过github来访问自己的博客了。<br>但是github.io的域名总给人一种不上档次的感觉，<br>所以我们可以绑定自己的域名，通过自己的域名来访问博客。</p><footer><strong>Matsuyoi ——Shiratsuyu</strong></footer></blockquote><p>在blog\source中新建一个CNAME文件，将想要绑定的域名输入在里面，保存。<br>例如我想使用二级域名blog，就在文件中输入blog.matsuyoi.com。<br>登录你的域名服务台，在解析记录中添加一条CNAME记录，指向你的github.io地址：<br>（因为我自己用的还是Shiratsuyu的二级域名，所以这儿放他的图）：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193644.jpg" alt="build-hexo-3_3"><br>全部完成后，重新部署静态页面：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样，你就可以通过你自己的域名访问博客啦~O(∩_∩)O</p><hr><h2 id="Hexo-主题配置"><a href="#Hexo-主题配置" class="headerlink" title="Hexo 主题配置"></a>Hexo 主题配置</h2><p>有没有觉得默认的主题不太符合自己的口味呢？<br>不要慌不要慌ヽ（≧□≦）ノ<br>我们这就来更改主题~<br>可以在<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">此处</a>下载自己喜欢的主题<br>保存到<strong>Hexo</strong>目录下的<strong>themes</strong>文件夹下。<br>然后在<strong>hexo</strong>目录下的<strong>_config.yml</strong>文件中修改，记事本方式打开，拉到下方，如图：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-193715.jpg" alt="themes_deploy"><br>注意：themes下主题的文件夹里也有个<strong>_config.yml</strong>，别改错了哟~(●ˇ∀ˇ●)</p><hr><p>感谢阅读～٩(๑òωó๑)۶</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>踩坑日记</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>windows</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Flak+pyenv+gunicorn+nginx+supervisor初次部署总结</title>
    <url>/posts/Flak-pyenv-gunicorn-nginx-supervisor%E5%88%9D%E6%AC%A1%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<!-- build time:Thu Apr 16 2020 22:01:41 GMT+0800 (中国标准时间) --><p>在个人博客的搭建实践完成后，就剩下尝试将项目部署上线了。初次进行项目部署，踩了不少坑，在过程中浏览了不少教程和资料，然而都不甚完整，因此将自己部署过程记录下来，以做总结、参考。</p><a id="more"></a><p><strong>写在前面：</strong></p><ul><li>本篇文章，远程主机系统为<code>Ubuntu 18</code>；</li><li>使用Git进行程序部署；虚拟环境采用pyenv管理、配置，这里不进行详细说明；</li><li>关于迁移工具、日志等不进行说明；</li></ul><h2 id="安装Gunicorn、Nginx、Supervisor"><a href="#安装Gunicorn、Nginx、Supervisor" class="headerlink" title="安装Gunicorn、Nginx、Supervisor"></a>安装Gunicorn、Nginx、Supervisor</h2><p>切换到项目使用的虚拟环境下：</p><ol start="0"><li><p>安装<strong>项目依赖</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install -r requirements.txt</span></span><br></pre></td></tr></table></figure></li><li><p>安装<strong>Gunicorn</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install gunicorn</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果想要使用异步worker，如gevent，则需要进行安装（本次部署采用gevent运行gunicorn）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install gevent</span></span><br></pre></td></tr></table></figure></li><li><p>安装<strong>Nginx</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一次部署，我使用系统二进制源方式安装即可</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查是否安装成功</span></span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p>更多关于Linux下安装Nginx的内容，可以查看这篇<a href="https://juejin.im/post/5d31ec3b5188253a8f27ef5b" target="_blank" rel="noopener">博客</a>。</p></li><li><p>安装<strong>Supervisor</strong>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install supervisor</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="创建程序实例-入口"><a href="#创建程序实例-入口" class="headerlink" title="创建程序实例(入口)"></a>创建程序实例(入口)</h2><p>在项目根目录下创建一个名为<code>wsgi.py</code>的脚本(命名只是约定，可以使用其他名称)，代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wsgi.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 载入环境变量</span></span><br><span class="line">dotenv_path = os.path.join(os.path.dirname(__file__), <span class="string">'.env'</span>)</span><br><span class="line"><span class="keyword">if</span> os.path.exists(dotenv_path):</span><br><span class="line">    load_dotenv(dotenv_path, override=<span class="literal">True</span>) <span class="comment"># load_dotenv默认不会更新已经存在的配置项, 因此使用override参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> xthonblog <span class="keyword">import</span> create_app</span><br><span class="line">app = create_app(<span class="string">'production'</span>)</span><br></pre></td></tr></table></figure><p>此程序实例仅在部署时运行。如果在生产环境下，需要使用生产服务器运行程序实例时，可以从本文件导入此程序实例：<code>from wsgi import app</code> 。</p><h2 id="从Git拉取代码并初始化程序环境"><a href="#从Git拉取代码并初始化程序环境" class="headerlink" title="从Git拉取代码并初始化程序环境"></a>从Git拉取代码并初始化程序环境</h2><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><p>将代码上托管在Github上，并在远程服务器上通过git拉取项目代码，是比较方便的一种方式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> <span class="comment"># 你打算存放项目代码的目录路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> <span class="comment"># 你的项目仓库地址</span></span></span><br></pre></td></tr></table></figure><h3 id="初始化程序环境"><a href="#初始化程序环境" class="headerlink" title="初始化程序环境"></a>初始化程序环境</h3><p>项目通过工厂函数创建程序实例，在<code>项目根目录/__init__.py</code>中，使用<code>click</code>注册了多个初始化用的命令行命令，依次执行它们：</p><ol><li><p>初始化数据库：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask initdb</span></span><br></pre></td></tr></table></figure></li><li><p>初始化项目管理员：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask init</span></span><br></pre></td></tr></table></figure></li><li><p>生成虚拟填充数据：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> flask forge</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="配置并使用Gunicorn运行程序"><a href="#配置并使用Gunicorn运行程序" class="headerlink" title="配置并使用Gunicorn运行程序"></a>配置并使用Gunicorn运行程序</h2><p>Gunicorn运行一个WSGI程序时，使用的命令模式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gunicorn [OPTION] 模块名:变量名</span></span><br></pre></td></tr></table></figure><p>这里的变量名即要运行的WSGI可调用对象,也就是我们使用Flask 创建的程序实例,而模块名即包含程序实例的模块，在本篇文章中，模块名即<code>wsgi</code>，变量名即<code>app</code>。</p><p>常用的几个<code>OPTION</code>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-k # 指定worker类，默认为同步worker，可采用异步worker，如：gevent、eventlet、tornado，但需要另外安装</span><br><span class="line">-w # 指定worker的数量，“通常来说，worker的数量建议为(2×CPU核心数)+1“</span><br><span class="line">-b # 指定绑定服务器套接字，如：gunicorn -b 127.0.0.1:8000 模块名:变量名</span><br><span class="line">-c # 指定配置文件路径，路径为字符串格式，如：gunicorn -c gun.conf</span><br></pre></td></tr></table></figure><p>以下是本次部署时使用的配置文件<code>gun.conf</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gun.conf</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">bind = <span class="string">'127.0.0.1:8000'</span> <span class="comment"># 绑定的ip及端口号</span></span><br><span class="line">workers = <span class="number">2</span> <span class="comment">#进程数</span></span><br><span class="line">worker_class = <span class="string">"gevent"</span> <span class="comment"># 使用gevent模式，还可以使用sync模式，默认的是sync模式</span></span><br><span class="line">debug = <span class="literal">True</span> <span class="comment"># 开启debug项后，在启动gunicorn的时候可以看到所有可配置项的配置</span></span><br><span class="line">chdir = <span class="string">''</span> <span class="comment"># 项目的根目录</span></span><br><span class="line">proc_name = <span class="string">'gunicorn.proc'</span> <span class="comment"># 设置进程名字</span></span><br></pre></td></tr></table></figure><p>因此，使用<strong>gunicorn</strong>运行时：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gunicorn -c gun.conf wsgi:app</span></span><br></pre></td></tr></table></figure><blockquote><p>更多gunicorn的配置参数，可以查看<a href="https://www.cnblogs.com/nanrou/p/7026789.html" target="_blank" rel="noopener">博客</a>。</p></blockquote><h2 id="使用Nginx提供反向代理"><a href="#使用Nginx提供反向代理" class="headerlink" title="使用Nginx提供反向代理"></a>使用Nginx提供反向代理</h2><p>在前面的步骤中，我们已经安装了Nginx，现在对其进行配置。</p><p>先说明一下安装好后的文件位置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;sbin&#x2F;nginx：主程序</span><br><span class="line">&#x2F;etc&#x2F;nginx：存放配置文件</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;nginx：存放静态文件</span><br><span class="line">&#x2F;var&#x2F;log&#x2F;nginx：存放日志</span><br></pre></td></tr></table></figure><blockquote><p>我们可以在Nginx的默认配置文件(/etc/nginx/nginx.conf)中写入程序配置,但通常情况下,为了便于组织,我们可以在/etc/nginx/sites- enabled/或是/etc/nginx/conf.d/目录下为我们的Flask程序创建单独的Nginx 配置文件。</p><p><strong>– 《Flask Web开发实战》</strong></p></blockquote><p>Nginx配置的常用指令，见图：</p><p><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-184130.png" alt="Nginx配置的常用指令"></p><blockquote><p>其他的语法规则包括:块通过花括号“{}”指定;每一行指令以“;”结尾;以“#”开头的是注释。</p></blockquote><p>以下是本次部署使用的nginx的具体配置：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>; <span class="comment"># 监听80端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  your_ip; <span class="comment"># HOST机器的外部域名，用地址也行</span></span><br><span class="line">    <span class="comment"># 未设置日志，所以这里先不进行配置</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8000; <span class="comment"># 转发地址, 即Gunicorn运行的地址</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：Nginx安装后会自动运行，可以通过访问服务器的IP地址，会看到Nginx提供的测试页面。</p></blockquote><h2 id="配置并使用Supervisor管理进程"><a href="#配置并使用Supervisor管理进程" class="headerlink" title="配置并使用Supervisor管理进程"></a>配置并使用Supervisor管理进程</h2><blockquote><p>安装Supervisor后,它会自动在/etc/supervisor目录下生成一个包含全局配置的配置文件,名为supervisord.conf的配置文件(INI风格语法) 来定义进程相关的命令等信息。</p><p>为了便于管理,我们可以为程序配置创建单独的配置文件。这个全局配置默认会将/etc/supervisor/conf.d目录下的配置文件也包含在全局配置文件中。</p><p><strong>– 《Flask Web开发实战》</strong></p></blockquote><p>本次部署，我们先备份<code>/etc/supervisor/conf.d/default</code>，再对其进行编辑：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> xthonblog.conf</span></span><br><span class="line">[program:xthonblog]</span><br><span class="line">environment=PYTHONPATH=$PYTHONPATH:/root/.pyenv/versions/blog-v377/bin/  ; 指定程序使用的python环境</span><br><span class="line">directory=/root/projects/2020/xthonblog  ; 程序的启动目录</span><br><span class="line">command=/root/.pyenv/versions/blog-v377/bin/gunicorn -c /root/projects/2020/xthonblog/gun.conf wsgi:app  ; 启动命令</span><br><span class="line">user=root         ; 用哪个用户启动</span><br><span class="line">autostart=true    ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">autorestart=true  ; 自动重启</span><br><span class="line">stopasgroup=true  ; 与killasgroup一同开启，确保在关闭程序时停止所有相关的子进程</span><br><span class="line">killasgroup=true  ; 通过这两项配置来确保所有子进程都能正确停止</span><br><span class="line">stdout_logfile_maxbytes=5MB  ; stdout 日志文件大小</span><br><span class="line">stdout_logfile_backups=2     ; stdout 日志文件备份数</span><br><span class="line">stdout_logfile=/root/projects/2020/xthonblog/supervisor-log/xthon_stdout.log  ; stdout输出路径</span><br><span class="line">stderr_logfile=/root/projects/2020/xthonblog/supervisor-log/xthon_stderr.log  ; stderr输出路径</span><br></pre></td></tr></table></figure><p>其中 <code>[program:usercenter]</code> 中的 <code>usercenter</code> 是应用程序的唯一标识，不能重复。对该程序的所有操作（start, restart 等）都通过名字来实现。</p><p>如果python环境没有配置正确(包括gunicorn的路径、配置文件路径等)，supervisor启动时，会出现<code>FATAL、BACKOFF</code>等错误；</p><p><strong>有两种方式指定程序使用的 Python 环境：</strong></p><ol><li><code>command</code> 使用绝对路径。本项目使用 pyenv 来管理 Python 环境，上面例子中的 gunicorn 路径可以替换为 <code>/root/.pyenv/versions/blog-v377/bin/gunicorn</code>. 这种方式一目了然，推荐使用。</li><li>通过 <code>environment</code> 配置 <code>PYTHONPATH</code>.<br>如<code>xthonblog.conf</code>中那样，这个配置项非常有用，可以用来给程序传入环境变量。</li></ol><p>编辑完后通过下面的命令重新启动supervisor服务以便让配置生效:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo service supervisor restart</span></span><br></pre></td></tr></table></figure><p>配置中的xthonblog程序会在后台被自动执行，可以通过supervisor提供的命令行工具supervisorctl来查看和操作相关程序：</p><p><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-13-192120.png" alt="supervisor-RUNNING运行状态"></p><p>可以看到，程序已经在运行了，现在通过访问远程服务器的IP地址，即可成功访问项目页面。</p><blockquote><p>除了命令行工具supervisorctl,Supervisor还提供了Web客户端，这里就不进一步说明了。</p></blockquote><hr><p>感谢阅读～٩(๑òωó๑)۶</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>踩坑日记</category>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>pyenv</tag>
        <tag>gunicorn</tag>
        <tag>nginx</tag>
        <tag>supervisor</tag>
        <tag>git</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装并配置MongoDB</title>
    <url>/posts/Mac%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AEMongoDB/</url>
    <content><![CDATA[<!-- build time:Thu Apr 16 2020 22:01:41 GMT+0800 (中国标准时间) --><p>简单介绍了通过Homebrew安装MongDB，并且为其进行简单配置的过程。</p><a id="more"></a><h2 id="Environment"><a href="#Environment" class="headerlink" title="[Environment]"></a>[Environment]</h2><ul><li>System: macOS 10.14.4</li><li>Terminal: zsh</li></ul><h2 id="更新Homebrew"><a href="#更新Homebrew" class="headerlink" title="更新Homebrew"></a>更新Homebrew</h2><p>首先更新一下homebrew(如果安装了的话)：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><h2 id="安装MongoDB"><a href="#安装MongoDB" class="headerlink" title="安装MongoDB"></a>安装MongoDB</h2><p>直接使用homebrew安装即可：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><p>然后便稍等片刻吧。</p><h2 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h2><ol><li><p>指定MongoDB进程读写数据的目录。MongoDB默认使用<code>/data/db</code>目录来读写数据，因此此处直接在根目录下创建该文件夹：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /data/db</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>为<code>/data/db</code>文件夹授权：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将username替换为自己的用户名</span></span><br><span class="line">sudo chown username /data/db</span><br><span class="line"><span class="comment">#不知道自己用户名的使用如下命令查看</span></span><br><span class="line">whoami</span><br></pre></td></tr></table></figure></li><li><p>配置mongodb的环境变量<br>我使用的是zsh终端，所以此处先为zsh添加mongdb的安装路径；通过homebrew安装的软件，都被放置在<code>/usr/local/Celler/</code>下，不清楚的话，安装成功后会有提示：如下图：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-12-094755.png" alt="mac-homebrew-install-mongodb-sucess"></p><p>命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment">#如果是使用bash终端，则：</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment">#添加mongodb的安装路径至zsh的path中</span></span><br><span class="line"><span class="comment">#在文件末尾使用添加下面的语句</span></span><br><span class="line"><span class="built_in">export</span> <span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/Cellar/mongodb/4.0.3_1/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"><span class="comment">#需要注意，此处的文件夹路径根据具体情况填写</span></span><br><span class="line"><span class="comment">#保存后，退出编辑文件，激活生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>修改MongoDB的配置文件。<br>文件路径在安装成功时也提示给出：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-12-094823.png" alt="mac-install-mongodb-config_location"></p><p>修改一下默认的配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbPath: /data/db</span><br></pre></td></tr></table></figure><p>保存并退出。</p></li></ol><ol start="5"><li><p>启动mongod服务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongod</span><br></pre></td></tr></table></figure><p>成功启动则如下图：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-12-094845.png" alt="mongodb-install-execute_mongod"></p><p>此时打开另一个终端输入mongo即可打开mongodb-client：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mongo</span><br><span class="line"> <span class="comment">#显示当前数据库集合</span></span><br><span class="line"> show dbs</span><br></pre></td></tr></table></figure><p>如下图：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-12-094901.png" alt="mongodb-show_dbs"><br>退出mongoldb-client：<br><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-12-094915.png" alt="mongodb-exit"></p></li></ol><hr><p>感谢阅读～٩(๑òωó๑)۶</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>环境配置</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>[Mac] vscode更新失败的解决方法</title>
    <url>/posts/Mac-vscode%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<!-- build time:Thu Apr 16 2020 22:01:41 GMT+0800 (中国标准时间) --><p>记录Mac系统下，vscode更新失败，提示<code>Permission denied</code>的解决办法。</p><p>vscode版本：<code>1.44.0</code></p><a id="more"></a><h2 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Could not create temporary directory: Permission denied</span><br></pre></td></tr></table></figure><h2 id="问题起因"><a href="#问题起因" class="headerlink" title="问题起因"></a>问题起因</h2><p>在 <code>/Users/username/Library/Caches/</code>目录下，有以下两个文件， 对应的用户是不一样的，一个是<code>root</code>一个<code>username</code>，因为这两个文件的用户不一样，导致了更新失败。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li><p>关闭vscode</p></li><li><p>输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 这一步是需要输入密码的</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown <span class="variable">$USER</span> ~/Library/Caches/com.microsoft.VSCode.ShipIt/</span></span><br></pre></td></tr></table></figure></li><li><p>输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 这一步是不需要输入密码的, 如果不进行第一步，第二步会报错</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo chown <span class="variable">$USER</span> ~/Library/Caches/com.microsoft.VSCode.ShipIt/*</span></span><br></pre></td></tr></table></figure></li><li><p>更新xattr：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> xattr -dr com.apple.quarantine /Applications/Visual\ Studio\ Code.app</span></span><br></pre></td></tr></table></figure></li><li><p>重新打开vscode，点击Code &gt; Check for Updates， 点击之后，<code>Check for Updates</code>变成灰色，需要稍等片刻，便可以更新，之后会跳出提示，重启vscode，再次重启vscode，问题就解决了。</p></li></ol><blockquote><p>参考 <code>Code won&#39;t update on macOS #7426</code> ，问题链接地址：<a href="https://github.com/Microsoft/vscode/issues/7426" target="_blank" rel="noopener">vscode-issue-7426</a></p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>vscode</tag>
        <tag>解决方案</tag>
      </tags>
  </entry>
  <entry>
    <title>Web实验2碰到的问题</title>
    <url>/posts/Web%E5%AE%9E%E9%AA%8C2%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<!-- build time:Thu Apr 16 2020 22:01:41 GMT+0800 (中国标准时间) --><p>今日做web实验2，要求很简单，使用php接受html数据而已；但是完成过程中踩了不少坑，特此记录下来。</p><a id="more"></a><h2 id="Problems"><a href="#Problems" class="headerlink" title="[Problems]"></a>[Problems]</h2><ol><li>Apache配置php7错误;</li><li>phpstorm提交相关表单，出现 502 bad gateway;</li><li>phpstorm提交相关表单，出现 404 not found;</li><li>phpstorm提交相关表单，直接显示php源码，未解析;</li></ol><h2 id="Cause"><a href="#Cause" class="headerlink" title="[Cause]"></a>[Cause]</h2><ol><li>Apache的httpd.conf配置文件出错;</li><li>运行的php文件需要放在apache的网站根目录下，如果运行不在该目录下的文件就会显示502 bad gateway;</li><li>其次在运行相关表单提交或者php页面跳转时会提示404 not found，即找不到服务器。这是因为phpstorm的页面默认在localhost：63342端口下运行，而我们的apache服务器一般默认为80端口，所以在提交表单到服务器时它会找不到相关php程序，尽管你的路径是正确的，因此需要配置phpstorm的服务器环境;</li><li>网上查了许久，各种纷杂的原因，我都折腾了一遍，均未解决；以至于最后我解决了404、502的问题后，莫名其妙的可以解析了，所以我也不清楚原因;</li></ol><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="[Solutions]"></a>[Solutions]</h2><ol><li><p>打开terminal，如下操作：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/apache2</span><br><span class="line"><span class="meta">#</span><span class="bash">open httpd.conf</span></span><br><span class="line">sudo vim httpd.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">然后找到LoadModule php7_module···这条语句</span></span><br><span class="line"><span class="meta">#</span><span class="bash">将其修改为你系统内的libphp7.so的路径,我使用了自带的，所以便只是将改语句句首的 <span class="comment"># 号去掉，变为：</span></span></span><br><span class="line">LoadModule php7_module libexec/apache2/libphp7.so</span><br></pre></td></tr></table></figure></li><li><p>将文件移动到Apache根目录下即可；</p></li><li><p>配置phpstorm：</p><p><code>preferences -&gt; Build,Excution,Deployment -&gt; Deployment</code> ，选择左上角绿色的“+”按钮新建，起个名字，type选择inplace（本地调试的意思），然后设置web sever root url为：<code>http://localhost</code></p><p>如图：</p><p><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-12-094953.png" alt="配置phpstorm-deployment"></p><p>然后在mappings标签页下填写localpath，即你的<strong>apache网站根目录</strong>，如图：</p><p><img data-src="https://hexo-image-gz-1252782802.cos.ap-guangzhou.myqcloud.com/blog-images/2020-04-12-095011.png" alt="配置phpstorm-deployment-mapping"></p></li><li><p>网上查找的几个点如：修改<code>/etc/php.ini.default</code>为<code>php.ini</code>、将<code>php.ini</code>中的<code>short_open_tag = Off</code>改为<code>short_open_tag = On</code>，再重启Apache(<code>sudo apachectl restart</code>)……</p></li></ol><hr><!-- rebuild by neat -->]]></content>
      <categories>
        <category>踩坑日记</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>apache</tag>
        <tag>web</tag>
      </tags>
  </entry>
</search>
